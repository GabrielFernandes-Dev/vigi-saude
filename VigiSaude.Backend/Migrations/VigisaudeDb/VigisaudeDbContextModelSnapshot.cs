// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VigiSaude.Backend.Data;

#nullable disable

namespace VigiSaude.Backend.Migrations.VigisaudeDb
{
    [DbContext(typeof(VigisaudeDbContext))]
    partial class VigisaudeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FatoresriscoquedaHasQueda", b =>
                {
                    b.Property<int>("FatorRiscoQuedaIdFatorRiscoQueda")
                        .HasColumnType("int")
                        .HasColumnName("FatorRiscoQueda_idFatorRiscoQueda");

                    b.Property<int>("QuedaIdIncidente")
                        .HasColumnType("int")
                        .HasColumnName("Queda_idIncidente");

                    b.HasKey("FatorRiscoQuedaIdFatorRiscoQueda", "QuedaIdIncidente")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "FatorRiscoQuedaIdFatorRiscoQueda" }, "fk_FatorRiscoQueda_has_Queda_FatorRiscoQueda1_idx");

                    b.HasIndex(new[] { "QuedaIdIncidente" }, "fk_FatorRiscoQueda_has_Queda_Queda1_idx");

                    b.ToTable("fatoresriscoqueda_has_quedas", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.CategoriasmedicamentoquedaHasQueda", b =>
                {
                    b.Property<int>("CategoriaMedicamentoQuedaIdCategoriaMedicamentoQueda")
                        .HasColumnType("int")
                        .HasColumnName("CategoriaMedicamentoQueda_idCategoriaMedicamentoQueda");

                    b.Property<int>("QuedaIdIncidente")
                        .HasColumnType("int")
                        .HasColumnName("Queda_idIncidente");

                    b.Property<string>("DescricaoMeds")
                        .HasColumnType("text");

                    b.HasKey("CategoriaMedicamentoQuedaIdCategoriaMedicamentoQueda", "QuedaIdIncidente")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CategoriaMedicamentoQuedaIdCategoriaMedicamentoQueda" }, "fk_MedicamentoQueda_has_Queda_MedicamentoQueda1_idx");

                    b.HasIndex(new[] { "QuedaIdIncidente" }, "fk_MedicamentoQueda_has_Queda_Queda1_idx");

                    b.ToTable("categoriasmedicamentoqueda_has_quedas", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Categoriasmedicamentoquedum", b =>
                {
                    b.Property<int>("IdCategoriaMedicamentoQueda")
                        .HasColumnType("int")
                        .HasColumnName("idCategoriaMedicamentoQueda");

                    b.Property<string>("DescricaoCatMedQueda")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCategoriaMedicamentoQueda")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DescricaoCatMedQueda" }, "DescricaoMedQueda_UNIQUE")
                        .IsUnique();

                    b.ToTable("categoriasmedicamentoqueda", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Desfecho", b =>
                {
                    b.Property<int>("IdDesfecho")
                        .HasColumnType("int")
                        .HasColumnName("idDesfecho");

                    b.Property<string>("DescricaoDesfecho")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdDesfecho")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DescricaoDesfecho" }, "DescricaoDesfecho_UNIQUE")
                        .IsUnique();

                    b.ToTable("desfechos", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Errosmedicacao", b =>
                {
                    b.Property<int>("IdIncidente")
                        .HasColumnType("int")
                        .HasColumnName("idIncidente");

                    b.HasKey("IdIncidente")
                        .HasName("PRIMARY");

                    b.ToTable("errosmedicacao", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.ErrosmedicacaoHasMedicamento", b =>
                {
                    b.Property<int>("ErroMedicacaoIdIncidente")
                        .HasColumnType("int")
                        .HasColumnName("ErroMedicacao_idIncidente");

                    b.Property<int>("MedicamentoIdMedicamento")
                        .HasColumnType("int")
                        .HasColumnName("Medicamento_idMedicamento");

                    b.Property<string>("CausaErro")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateOnly?>("DataFimMed")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DataInicioMed")
                        .HasColumnType("date");

                    b.Property<string>("DescricaoEfeitoNocivo")
                        .HasColumnType("text");

                    b.Property<int?>("DesfechoIdDesfecho")
                        .HasColumnType("int")
                        .HasColumnName("Desfecho_idDesfecho");

                    b.Property<string>("Indicacao")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Ocorrencia")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Posologia")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("ResultouEfeitoNocivo")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("ViaAdmIdViaAdm")
                        .HasColumnType("int")
                        .HasColumnName("ViaAdm_idViaAdm");

                    b.HasKey("ErroMedicacaoIdIncidente", "MedicamentoIdMedicamento")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "DesfechoIdDesfecho" }, "fk_ErroMedicacao_has_Medicamento_Desfecho1_idx");

                    b.HasIndex(new[] { "ErroMedicacaoIdIncidente" }, "fk_ErroMedicacao_has_Medicamento_ErroMedicacao1_idx");

                    b.HasIndex(new[] { "MedicamentoIdMedicamento" }, "fk_ErroMedicacao_has_Medicamento_Medicamento1_idx");

                    b.HasIndex(new[] { "ViaAdmIdViaAdm" }, "fk_ErroMedicacao_has_Medicamento_ViaAdm1_idx");

                    b.ToTable("errosmedicacao_has_medicamentos", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Fatoresriscoquedum", b =>
                {
                    b.Property<int>("IdFatorRiscoQueda")
                        .HasColumnType("int")
                        .HasColumnName("idFatorRiscoQueda");

                    b.Property<string>("DescricaoFator")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdFatorRiscoQueda")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DescricaoFator" }, "DescricaoFatores_UNIQUE")
                        .IsUnique();

                    b.ToTable("fatoresriscoqueda", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Flebite", b =>
                {
                    b.Property<int>("IdIncidente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idIncidente");

                    b.Property<string>("CalibreCateter")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Diagnóstico")
                        .HasColumnType("text");

                    b.Property<string>("GrauFlebite")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LocalPuncao")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("NumCateteresInseridos")
                        .HasColumnType("int");

                    b.Property<int?>("QtdMedVesicanteIrritante")
                        .HasColumnType("int");

                    b.Property<int?>("QtdPuncoesAteIncidente")
                        .HasColumnType("int");

                    b.Property<decimal?>("TempoPermanenciaAcesso")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<string>("TipoCateter")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdIncidente")
                        .HasName("PRIMARY");

                    b.ToTable("flebites", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.FlebitesHasMedicamento", b =>
                {
                    b.Property<int>("FlebiteIdIncidente")
                        .HasColumnType("int")
                        .HasColumnName("Flebite_idIncidente");

                    b.Property<int>("MedicamentoIdMedicamento")
                        .HasColumnType("int")
                        .HasColumnName("Medicamento_idMedicamento");

                    b.Property<string>("Diluente")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("ModoInfusao")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("FlebiteIdIncidente", "MedicamentoIdMedicamento")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "FlebiteIdIncidente" }, "fk_Flebite_has_Medicamento_Flebite1_idx");

                    b.HasIndex(new[] { "MedicamentoIdMedicamento" }, "fk_Flebite_has_Medicamento_Medicamento1_idx");

                    b.ToTable("flebites_has_medicamentos", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Incidente", b =>
                {
                    b.Property<int>("IdIncidente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idIncidente");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdIncidente"));

                    b.Property<string>("ClassificacaoDano")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("ClassificacaoIncidente")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateOnly?>("DataFim")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataInicio")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DataNotificacao")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NotificadorIdNotificador")
                        .HasColumnType("int")
                        .HasColumnName("Notificador_idNotificador");

                    b.Property<int>("PacienteIdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Paciente_idPaciente");

                    b.Property<int>("SetorIdSetor")
                        .HasColumnType("int")
                        .HasColumnName("Setor_idSetor");

                    b.Property<int>("TipoIncidenteIdTipoIncidente")
                        .HasColumnType("int")
                        .HasColumnName("TipoIncidente_idTipoIncidente");

                    b.HasKey("IdIncidente")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NotificadorIdNotificador" }, "fk_Incidente_Notificador1_idx");

                    b.HasIndex(new[] { "PacienteIdPaciente" }, "fk_Incidente_Paciente1_idx");

                    b.HasIndex(new[] { "SetorIdSetor" }, "fk_Incidente_Setor1_idx");

                    b.HasIndex(new[] { "TipoIncidenteIdTipoIncidente" }, "fk_Incidente_TipoIncidente1_idx");

                    b.ToTable("incidentes", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Lesoespressao", b =>
                {
                    b.Property<int>("IdIncidente")
                        .HasColumnType("int")
                        .HasColumnName("idIncidente");

                    b.Property<string>("ClassificacaoBraden")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateOnly?>("DataPrimeiraAvaliacao")
                        .HasColumnType("date");

                    b.Property<string>("DescricaoOutro")
                        .HasColumnType("text");

                    b.Property<int?>("EscoreBraden")
                        .HasColumnType("int");

                    b.Property<string>("EstagioLesao")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("IntervaloMudanca")
                        .HasColumnType("int");

                    b.Property<int?>("LocalLesaoIdLocalLesao")
                        .HasColumnType("int")
                        .HasColumnName("LocalLesao_idLocalLesao");

                    b.Property<bool?>("MobilidadePrejudicada")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("MudancaDecubito")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Reavaliacao48h")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool?>("RegistroAvaliacaoFisio")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RegistroAvaliacaoNutri")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RegistroEnfermagem")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RegistroSae")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("RegistroSAE");

                    b.Property<string>("ResponsávelAvaliacao")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("SolicitacaoAvaliacaoNutri")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("SuperficieDinamicaApoio")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TempoInternacaoAteLesao")
                        .HasColumnType("longtext");

                    b.Property<string>("UsoCoberturaAdequada")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("IdIncidente")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LocalLesaoIdLocalLesao" }, "fk_LesaoPressao_LocalLesao1_idx");

                    b.ToTable("lesoespressao", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Locaislesao", b =>
                {
                    b.Property<int>("IdLocalLesao")
                        .HasColumnType("int")
                        .HasColumnName("idLocalLesao");

                    b.Property<string>("DescricaoLocal")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdLocalLesao")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DescricaoLocal" }, "DescricaoLocal_UNIQUE")
                        .IsUnique();

                    b.ToTable("locaislesao", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Locaisquedum", b =>
                {
                    b.Property<int>("IdLocalQueda")
                        .HasColumnType("int")
                        .HasColumnName("idLocalQueda");

                    b.Property<string>("DescricaoLocal")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdLocalQueda")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DescricaoLocal" }, "LocalQuedacol_UNIQUE")
                        .IsUnique();

                    b.ToTable("locaisqueda", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Medicamento", b =>
                {
                    b.Property<int>("IdMedicamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idMedicamento");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdMedicamento"));

                    b.Property<string>("Fabricante")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Lote")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("NomeGenerico")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateOnly?>("Validade")
                        .HasColumnType("date");

                    b.HasKey("IdMedicamento")
                        .HasName("PRIMARY");

                    b.ToTable("medicamentos", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Notificadore", b =>
                {
                    b.Property<int>("IdNotificador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idNotificador");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdNotificador"));

                    b.Property<string>("CategoriaProfissional")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<bool>("FuncionarioGerenciaRisco")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nome")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("SetorIdSetor")
                        .HasColumnType("int")
                        .HasColumnName("Setor_idSetor");

                    b.Property<string>("Telefone")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdNotificador")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SetorIdSetor" }, "fk_Notificador_Setor1_idx");

                    b.ToTable("notificadores", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Paciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPaciente");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPaciente"));

                    b.Property<DateOnly?>("DataAdmissao")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("HoraNascimento")
                        .HasColumnType("time");

                    b.Property<string>("Leito")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<decimal?>("Peso")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<string>("Prontuario")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Sexo")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("IdPaciente")
                        .HasName("PRIMARY");

                    b.ToTable("pacientes", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Queda", b =>
                {
                    b.Property<int>("IdIncidente")
                        .HasColumnType("int")
                        .HasColumnName("idIncidente");

                    b.Property<bool?>("AvaliacaoRiscoAdmissao")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Desfecho")
                        .HasColumnType("text");

                    b.Property<string>("Diagnostico")
                        .HasColumnType("text");

                    b.Property<TimeOnly?>("Horario")
                        .HasColumnType("time");

                    b.Property<int?>("LocalQuedaIdLocalQueda")
                        .HasColumnType("int")
                        .HasColumnName("LocalQueda_idLocalQueda");

                    b.Property<bool?>("PacienteComAcompanhante")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("QtdMedAltoRisco")
                        .HasColumnType("int");

                    b.Property<int?>("QtdMedBaixoRisco")
                        .HasColumnType("int");

                    b.Property<int?>("QtdMedMedioRisco")
                        .HasColumnType("int");

                    b.Property<bool?>("RegistroOrientacaoProntuario")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RiscoIdentificadoAdmissao")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TipoQuedaIdTipoQueda")
                        .HasColumnType("int")
                        .HasColumnName("TipoQueda_idTipoQueda");

                    b.Property<string>("Turno")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("IdIncidente")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LocalQuedaIdLocalQueda" }, "fk_Queda_LocalQueda1_idx");

                    b.HasIndex(new[] { "TipoQuedaIdTipoQueda" }, "fk_Queda_TipoQueda1_idx");

                    b.ToTable("quedas", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Ram", b =>
                {
                    b.Property<int>("IdIncidente")
                        .HasColumnType("int")
                        .HasColumnName("idIncidente");

                    b.HasKey("IdIncidente")
                        .HasName("PRIMARY");

                    b.ToTable("ram", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.RamHasMedicamento", b =>
                {
                    b.Property<int>("RamIdIncidente")
                        .HasColumnType("int")
                        .HasColumnName("Ram_idIncidente");

                    b.Property<int>("MedicamentoIdMedicamento")
                        .HasColumnType("int")
                        .HasColumnName("Medicamento_idMedicamento");

                    b.Property<string>("AcaoAdotada")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("DataFimMed")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("DataInicioMed")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("DesfechoIdDesfecho")
                        .HasColumnType("int")
                        .HasColumnName("Desfecho_idDesfecho");

                    b.Property<string>("Indicacao")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<bool?>("MedProvavelCausador")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Posologia")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("ViaAdmIdViaAdm")
                        .HasColumnType("int")
                        .HasColumnName("ViaAdm_idViaAdm");

                    b.HasKey("RamIdIncidente", "MedicamentoIdMedicamento")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "DesfechoIdDesfecho" }, "fk_Ram_has_Medicamento_Desfecho1_idx");

                    b.HasIndex(new[] { "MedicamentoIdMedicamento" }, "fk_Ram_has_Medicamento_Medicamento1_idx");

                    b.HasIndex(new[] { "RamIdIncidente" }, "fk_Ram_has_Medicamento_Ram1_idx");

                    b.HasIndex(new[] { "ViaAdmIdViaAdm" }, "fk_Ram_has_Medicamento_ViaAdm1_idx");

                    b.ToTable("ram_has_medicamentos", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Setore", b =>
                {
                    b.Property<int>("IdSetor")
                        .HasColumnType("int")
                        .HasColumnName("idSetor");

                    b.Property<string>("DescricaoSetor")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdSetor")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DescricaoSetor" }, "DescricaoSetor_UNIQUE")
                        .IsUnique();

                    b.ToTable("setores", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Tiposincidente", b =>
                {
                    b.Property<int>("IdTipoIncidente")
                        .HasColumnType("int")
                        .HasColumnName("idTipoIncidente");

                    b.Property<string>("DescricaoTipoIncidente")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdTipoIncidente")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DescricaoTipoIncidente" }, "DescricaoTipoIncidente_UNIQUE")
                        .IsUnique();

                    b.ToTable("tiposincidente", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Tiposquedum", b =>
                {
                    b.Property<int>("IdTipoQueda")
                        .HasColumnType("int")
                        .HasColumnName("idTipoQueda");

                    b.Property<string>("DescricaoTipo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdTipoQueda")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DescricaoTipo" }, "DescricaoTipo_UNIQUE")
                        .IsUnique();

                    b.ToTable("tiposqueda", (string)null);
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Viasadm", b =>
                {
                    b.Property<int>("IdViaAdm")
                        .HasColumnType("int")
                        .HasColumnName("idViaAdm");

                    b.Property<string>("DescricaoVia")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdViaAdm")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DescricaoVia" }, "DescricaoVia_UNIQUE")
                        .IsUnique();

                    b.ToTable("viasadm", (string)null);
                });

            modelBuilder.Entity("FatoresriscoquedaHasQueda", b =>
                {
                    b.HasOne("VigiSaude.Backend.Models.Fatoresriscoquedum", null)
                        .WithMany()
                        .HasForeignKey("FatorRiscoQuedaIdFatorRiscoQueda")
                        .IsRequired()
                        .HasConstraintName("fk_FatorRiscoQueda_has_Queda_FatorRiscoQueda1");

                    b.HasOne("VigiSaude.Backend.Models.Queda", null)
                        .WithMany()
                        .HasForeignKey("QuedaIdIncidente")
                        .IsRequired()
                        .HasConstraintName("fk_FatorRiscoQueda_has_Queda_Queda1");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.CategoriasmedicamentoquedaHasQueda", b =>
                {
                    b.HasOne("VigiSaude.Backend.Models.Categoriasmedicamentoquedum", "CategoriaMedicamentoQuedaIdCategoriaMedicamentoQuedaNavigation")
                        .WithMany("CategoriasmedicamentoquedaHasQueda")
                        .HasForeignKey("CategoriaMedicamentoQuedaIdCategoriaMedicamentoQueda")
                        .IsRequired()
                        .HasConstraintName("fk_MedicamentoQueda_has_Queda_MedicamentoQueda1");

                    b.HasOne("VigiSaude.Backend.Models.Queda", "QuedaIdIncidenteNavigation")
                        .WithMany("CategoriasmedicamentoquedaHasQueda")
                        .HasForeignKey("QuedaIdIncidente")
                        .IsRequired()
                        .HasConstraintName("fk_MedicamentoQueda_has_Queda_Queda1");

                    b.Navigation("CategoriaMedicamentoQuedaIdCategoriaMedicamentoQuedaNavigation");

                    b.Navigation("QuedaIdIncidenteNavigation");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Errosmedicacao", b =>
                {
                    b.HasOne("VigiSaude.Backend.Models.Incidente", "IdIncidenteNavigation")
                        .WithOne("Errosmedicacao")
                        .HasForeignKey("VigiSaude.Backend.Models.Errosmedicacao", "IdIncidente")
                        .IsRequired()
                        .HasConstraintName("fk_ErroMedicacao_Incidente1");

                    b.Navigation("IdIncidenteNavigation");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.ErrosmedicacaoHasMedicamento", b =>
                {
                    b.HasOne("VigiSaude.Backend.Models.Desfecho", "DesfechoIdDesfechoNavigation")
                        .WithMany("ErrosmedicacaoHasMedicamentos")
                        .HasForeignKey("DesfechoIdDesfecho")
                        .HasConstraintName("fk_ErroMedicacao_has_Medicamento_Desfecho1");

                    b.HasOne("VigiSaude.Backend.Models.Errosmedicacao", "ErroMedicacaoIdIncidenteNavigation")
                        .WithMany("ErrosmedicacaoHasMedicamentos")
                        .HasForeignKey("ErroMedicacaoIdIncidente")
                        .IsRequired()
                        .HasConstraintName("fk_ErroMedicacao_has_Medicamento_ErroMedicacao1");

                    b.HasOne("VigiSaude.Backend.Models.Medicamento", "MedicamentoIdMedicamentoNavigation")
                        .WithMany("ErrosmedicacaoHasMedicamentos")
                        .HasForeignKey("MedicamentoIdMedicamento")
                        .IsRequired()
                        .HasConstraintName("fk_ErroMedicacao_has_Medicamento_Medicamento1");

                    b.HasOne("VigiSaude.Backend.Models.Viasadm", "ViaAdmIdViaAdmNavigation")
                        .WithMany("ErrosmedicacaoHasMedicamentos")
                        .HasForeignKey("ViaAdmIdViaAdm")
                        .HasConstraintName("fk_ErroMedicacao_has_Medicamento_ViaAdm1");

                    b.Navigation("DesfechoIdDesfechoNavigation");

                    b.Navigation("ErroMedicacaoIdIncidenteNavigation");

                    b.Navigation("MedicamentoIdMedicamentoNavigation");

                    b.Navigation("ViaAdmIdViaAdmNavigation");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Flebite", b =>
                {
                    b.HasOne("VigiSaude.Backend.Models.Incidente", "IdIncidenteNavigation")
                        .WithOne("Flebite")
                        .HasForeignKey("VigiSaude.Backend.Models.Flebite", "IdIncidente")
                        .IsRequired()
                        .HasConstraintName("fk_Flebite_Incidente1");

                    b.Navigation("IdIncidenteNavigation");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.FlebitesHasMedicamento", b =>
                {
                    b.HasOne("VigiSaude.Backend.Models.Flebite", "FlebiteIdIncidenteNavigation")
                        .WithMany("FlebitesHasMedicamentos")
                        .HasForeignKey("FlebiteIdIncidente")
                        .IsRequired()
                        .HasConstraintName("fk_Flebite_has_Medicamento_Flebite1");

                    b.HasOne("VigiSaude.Backend.Models.Medicamento", "MedicamentoIdMedicamentoNavigation")
                        .WithMany("FlebitesHasMedicamentos")
                        .HasForeignKey("MedicamentoIdMedicamento")
                        .IsRequired()
                        .HasConstraintName("fk_Flebite_has_Medicamento_Medicamento1");

                    b.Navigation("FlebiteIdIncidenteNavigation");

                    b.Navigation("MedicamentoIdMedicamentoNavigation");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Incidente", b =>
                {
                    b.HasOne("VigiSaude.Backend.Models.Notificadore", "NotificadorIdNotificadorNavigation")
                        .WithMany("Incidentes")
                        .HasForeignKey("NotificadorIdNotificador")
                        .IsRequired()
                        .HasConstraintName("fk_Incidente_Notificador1");

                    b.HasOne("VigiSaude.Backend.Models.Paciente", "PacienteIdPacienteNavigation")
                        .WithMany("Incidentes")
                        .HasForeignKey("PacienteIdPaciente")
                        .IsRequired()
                        .HasConstraintName("fk_Incidente_Paciente1");

                    b.HasOne("VigiSaude.Backend.Models.Setore", "SetorIdSetorNavigation")
                        .WithMany("Incidentes")
                        .HasForeignKey("SetorIdSetor")
                        .IsRequired()
                        .HasConstraintName("fk_Incidente_Setor1");

                    b.HasOne("VigiSaude.Backend.Models.Tiposincidente", "TipoIncidenteIdTipoIncidenteNavigation")
                        .WithMany("Incidentes")
                        .HasForeignKey("TipoIncidenteIdTipoIncidente")
                        .IsRequired()
                        .HasConstraintName("fk_Incidente_TipoIncidente1");

                    b.Navigation("NotificadorIdNotificadorNavigation");

                    b.Navigation("PacienteIdPacienteNavigation");

                    b.Navigation("SetorIdSetorNavigation");

                    b.Navigation("TipoIncidenteIdTipoIncidenteNavigation");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Lesoespressao", b =>
                {
                    b.HasOne("VigiSaude.Backend.Models.Incidente", "IdIncidenteNavigation")
                        .WithOne("Lesoespressao")
                        .HasForeignKey("VigiSaude.Backend.Models.Lesoespressao", "IdIncidente")
                        .IsRequired()
                        .HasConstraintName("fk_LesaoPressao_Incidente1");

                    b.HasOne("VigiSaude.Backend.Models.Locaislesao", "LocalLesaoIdLocalLesaoNavigation")
                        .WithMany("Lesoespressaos")
                        .HasForeignKey("LocalLesaoIdLocalLesao")
                        .HasConstraintName("fk_LesaoPressao_LocalLesao1");

                    b.Navigation("IdIncidenteNavigation");

                    b.Navigation("LocalLesaoIdLocalLesaoNavigation");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Notificadore", b =>
                {
                    b.HasOne("VigiSaude.Backend.Models.Setore", "SetorIdSetorNavigation")
                        .WithMany("Notificadores")
                        .HasForeignKey("SetorIdSetor")
                        .HasConstraintName("fk_Notificador_Setor1");

                    b.Navigation("SetorIdSetorNavigation");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Queda", b =>
                {
                    b.HasOne("VigiSaude.Backend.Models.Incidente", "IdIncidenteNavigation")
                        .WithOne("Queda")
                        .HasForeignKey("VigiSaude.Backend.Models.Queda", "IdIncidente")
                        .IsRequired()
                        .HasConstraintName("fk_Queda_Incidente1");

                    b.HasOne("VigiSaude.Backend.Models.Locaisquedum", "LocalQuedaIdLocalQuedaNavigation")
                        .WithMany("Queda")
                        .HasForeignKey("LocalQuedaIdLocalQueda")
                        .HasConstraintName("fk_Queda_LocalQueda1");

                    b.HasOne("VigiSaude.Backend.Models.Tiposquedum", "TipoQuedaIdTipoQuedaNavigation")
                        .WithMany("Queda")
                        .HasForeignKey("TipoQuedaIdTipoQueda")
                        .HasConstraintName("fk_Queda_TipoQueda1");

                    b.Navigation("IdIncidenteNavigation");

                    b.Navigation("LocalQuedaIdLocalQuedaNavigation");

                    b.Navigation("TipoQuedaIdTipoQuedaNavigation");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Ram", b =>
                {
                    b.HasOne("VigiSaude.Backend.Models.Incidente", "IdIncidenteNavigation")
                        .WithOne("Ram")
                        .HasForeignKey("VigiSaude.Backend.Models.Ram", "IdIncidente")
                        .IsRequired()
                        .HasConstraintName("fk_Ram_Incidente1");

                    b.Navigation("IdIncidenteNavigation");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.RamHasMedicamento", b =>
                {
                    b.HasOne("VigiSaude.Backend.Models.Desfecho", "DesfechoIdDesfechoNavigation")
                        .WithMany("RamHasMedicamentos")
                        .HasForeignKey("DesfechoIdDesfecho")
                        .HasConstraintName("fk_Ram_has_Medicamento_Desfecho1");

                    b.HasOne("VigiSaude.Backend.Models.Medicamento", "MedicamentoIdMedicamentoNavigation")
                        .WithMany("RamHasMedicamentos")
                        .HasForeignKey("MedicamentoIdMedicamento")
                        .IsRequired()
                        .HasConstraintName("fk_Ram_has_Medicamento_Medicamento1");

                    b.HasOne("VigiSaude.Backend.Models.Ram", "RamIdIncidenteNavigation")
                        .WithMany("RamHasMedicamentos")
                        .HasForeignKey("RamIdIncidente")
                        .IsRequired()
                        .HasConstraintName("fk_Ram_has_Medicamento_Ram1");

                    b.HasOne("VigiSaude.Backend.Models.Viasadm", "ViaAdmIdViaAdmNavigation")
                        .WithMany("RamHasMedicamentos")
                        .HasForeignKey("ViaAdmIdViaAdm")
                        .HasConstraintName("fk_Ram_has_Medicamento_ViaAdm1");

                    b.Navigation("DesfechoIdDesfechoNavigation");

                    b.Navigation("MedicamentoIdMedicamentoNavigation");

                    b.Navigation("RamIdIncidenteNavigation");

                    b.Navigation("ViaAdmIdViaAdmNavigation");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Categoriasmedicamentoquedum", b =>
                {
                    b.Navigation("CategoriasmedicamentoquedaHasQueda");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Desfecho", b =>
                {
                    b.Navigation("ErrosmedicacaoHasMedicamentos");

                    b.Navigation("RamHasMedicamentos");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Errosmedicacao", b =>
                {
                    b.Navigation("ErrosmedicacaoHasMedicamentos");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Flebite", b =>
                {
                    b.Navigation("FlebitesHasMedicamentos");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Incidente", b =>
                {
                    b.Navigation("Errosmedicacao");

                    b.Navigation("Flebite");

                    b.Navigation("Lesoespressao");

                    b.Navigation("Queda");

                    b.Navigation("Ram");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Locaislesao", b =>
                {
                    b.Navigation("Lesoespressaos");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Locaisquedum", b =>
                {
                    b.Navigation("Queda");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Medicamento", b =>
                {
                    b.Navigation("ErrosmedicacaoHasMedicamentos");

                    b.Navigation("FlebitesHasMedicamentos");

                    b.Navigation("RamHasMedicamentos");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Notificadore", b =>
                {
                    b.Navigation("Incidentes");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Paciente", b =>
                {
                    b.Navigation("Incidentes");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Queda", b =>
                {
                    b.Navigation("CategoriasmedicamentoquedaHasQueda");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Ram", b =>
                {
                    b.Navigation("RamHasMedicamentos");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Setore", b =>
                {
                    b.Navigation("Incidentes");

                    b.Navigation("Notificadores");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Tiposincidente", b =>
                {
                    b.Navigation("Incidentes");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Tiposquedum", b =>
                {
                    b.Navigation("Queda");
                });

            modelBuilder.Entity("VigiSaude.Backend.Models.Viasadm", b =>
                {
                    b.Navigation("ErrosmedicacaoHasMedicamentos");

                    b.Navigation("RamHasMedicamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
